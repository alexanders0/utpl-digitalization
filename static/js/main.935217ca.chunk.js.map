{"version":3,"sources":["components/DigitalizationContext/index.js","components/Scan/index.js","components/ScanParameter/index.js","components/Scanner/index.js","components/FileProperty/index.js","components/ScannedFile/index.js","components/UploadFileModal/index.js","components/UploadScannedDocumentForm/index.js","utpl_logo.png","components/App/AppUI.js","components/App/index.js","reportWebVitals.js","index.js"],"names":["DigitalizationContext","React","createContext","DigitalizationProvider","props","useState","scannedDocuments","setScannedDocuments","isScanning","setScanning","Provider","value","children","Scan","useContext","scannedImages","setScannedImages","scannedThumbnails","setScannedThumbnails","convertToFile","scannedImage","pdf","src","split","binary","bin","length","buf","ArrayBuffer","arr","Uint8Array","i","charCodeAt","fixBinary","window","atob","blob","Blob","type","File","displayImagesOnPage","successful","mesg","response","console","error","toLowerCase","indexOf","info","scanner","getScannedImages","Array","processOriginal","thumbnails","thumbnail","processThumbnail","prevScannedImages","addScannedImage","scannedDocument","prevScannedDocuments","addScannedDocument","scannedThumbnail","prevThumbnails","addScannedThumbnail","Container","Button","className","variant","size","disabled","onClick","scan","colorMode","resolution","paperSize","detectBlankPages","keepBlankPages","blankPageSeparator","Spinner","as","animation","role","Row","map","index","Col","xs","md","Badge","pill","bg","Image","id","ScanParameter","FloatingLabel","controlId","label","Form","Select","parameterValue","onChange","event","setParameterValue","target","options","option","Scanner","setColorMode","setResolution","setPaperSize","setDetectBlankPages","setKeepBlankPages","setBlankPageSeparator","FileProperty","Group","Label","labelName","Control","required","placeholder","propertyValue","setPropertyValue","ScannedFile","UploadFileModal","Modal","centered","Header","closeButton","Title","Body","color","Footer","onHide","UploadScannedDocumentForm","nameValue","setNameValue","descriptionValue","setDescriptionValue","fileNameValue","setFileNameValue","indexDocument","setIndexDocument","modalShow","setModalShow","isLoading","setLoading","setError","onSubmit","preventDefault","fileName","changeFileName","formData","FormData","append","log","axios","post","headers","then","status","data","catch","show","AppUI","Navbar","sticky","Brand","href","alt","logo","width","height","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAEMA,EAAwBC,IAAMC,gBAEpC,SAASC,EAAuBC,GAE9B,MAAgDH,IAAMI,SAAS,IAA/D,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAAkCN,IAAMI,UAAS,GAAjD,mBAAOG,EAAP,KAAmBC,EAAnB,KAEA,OACE,cAACT,EAAsBU,SAAvB,CAAgCC,MAAO,CACrCL,mBACAC,sBACAC,aACAC,eAJF,SAMGL,EAAMQ,W,kGCAb,SAASC,EAAKT,GAEZ,MAIIH,IAAMa,WAAWd,GAHnBO,EADF,EACEA,oBACAC,EAFF,EAEEA,WACAC,EAHF,EAGEA,YAGF,EAA0CR,IAAMI,SAAS,IAAzD,mBAAOU,EAAP,KAAsBC,EAAtB,KACA,EAAkDf,IAAMI,SAAS,IAAjE,mBAAOY,EAAP,KAA0BC,EAA1B,KA6CMC,EAAgB,SAACC,GACrB,IAAIC,EAAMD,EAAaE,IAAIC,MAAM,KAAK,GAClCC,EAZY,SAACC,GAIjB,IAHA,IAAIC,EAASD,EAAIC,OACbC,EAAM,IAAIC,YAAYF,GACtBG,EAAM,IAAIC,WAAWH,GAChBI,EAAI,EAAGA,EAAIL,EAAQK,IAC1BF,EAAIE,GAAKN,EAAIO,WAAWD,GAE1B,OAAOJ,EAKMM,CAAUC,OAAOC,KAAKd,IAC/Be,EAAO,IAAIC,KAAK,CAACb,GAAS,CAAEc,KAAM,oBAEtC,OADW,IAAIC,KAAK,CAACH,GAAO,eAAgB,CAAEE,KAAM,qBA+ChDE,EAAsB,SAACC,EAAYC,EAAMC,GAE7C,IAAIF,EAGF,OAFAG,QAAQC,MAAM,WAAaH,QAC3BjC,GAAY,GAId,GAAGgC,GAAsB,MAARC,GAAgBA,EAAKI,cAAcC,QAAQ,gBAAkB,EAG5E,OAFAH,QAAQI,KAAK,uBACbvC,GAAY,GAKd,IADA,IAAIM,EAAgBkC,QAAQC,iBAAiBP,GAAU,GAAM,GACrDZ,EAAI,EAAIhB,aAAyBoC,OAAUpB,EAAIhB,EAAcW,OAAQK,IAAK,CAChF,IAAIX,EAAeL,EAAcgB,GACjCqB,EAAgBhC,GAIlB,IADA,IAAIiC,EAAaJ,QAAQC,iBAAiBP,GAAU,GAAO,GACnDZ,EAAI,EAAIsB,aAAsBF,OAAUpB,EAAIsB,EAAW3B,OAAQK,IAAK,CAC1E,IAAIuB,EAAYD,EAAWtB,GAC3BwB,EAAiBD,GAGnB7C,GAAY,IAGR2C,EAAkB,SAAChC,IArHD,SAACA,GACvBJ,GAAiB,SAAAwC,GACf,MAAM,GAAN,mBACKA,GADL,CAEEpC,OAkHJqC,CAAgBrC,GApGS,SAACsC,GAC1BnD,GAAoB,SAAAoD,GAClB,MAAM,GAAN,mBACKA,GADL,CAEED,OAmGJE,CADsBzC,EAAcC,KAIhCmC,EAAmB,SAACM,IAnHE,SAACA,GAC3B3C,GAAqB,SAAA4C,GACnB,MAAM,GAAN,mBACKA,GADL,CAEED,OAgHJE,CAAoBF,IAGtB,OACE,qCACE,eAACG,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CACEC,UAAU,MACVC,QAAQ,UACRC,KAAK,KACL9B,KAAK,SACL+B,SAAU7D,EACV8D,QA5Fa,WACnB7D,GAAY,GACZwC,QAAQsB,KACN/B,EACA,CACE,oBAAsB,EACtB,kBAAqB,EAErB,kBAAsB,CAClB,eAAmBpC,EAAMoE,UACzB,iBAAqBpE,EAAMqE,WAC3B,iBAAqBrE,EAAMqE,WAC3B,oBAAwBrE,EAAMsE,WAIlC,mBAAsBtE,EAAMuE,iBAC5B,qBAAwB,SACxB,0BAA6B,IAC7B,kBAAqBvE,EAAMwE,eAG3B,eAAkB,CACdxE,EAAMyE,oBAIV,gBAAmB,CACf,CACI,KAAQ,gBAER,OAAU,OAEd,CACI,KAAQ,0BACR,OAAU,MACV,iBAAoB,SAkD5B,UAQGrE,EACC,cAACsE,EAAA,EAAD,CACEC,GAAG,OACHC,UAAU,SACVZ,KAAK,KACLa,KAAK,SACL,cAAY,SACV,cAAC,IAAD,IAELzE,EAAa,kBAAe,UAG/B,eAACyD,EAAA,EAAD,CACEC,UAAU,MACVC,QAAQ,UACRC,KAAK,KACL9B,KAAK,SACLgC,QAlKa,WACnBtD,EAAiB,IACjBE,EAAqB,IACrBX,EAAoB,KA0JhB,UAOE,cAAC,IAAD,IAPF,cAWF,cAACyD,EAAA,EAAD,UACE,eAACkB,EAAA,EAAD,WACE,yDAA4BnE,EAAcW,UAC1C,sDAAyBT,EAAkBS,UAEzCT,EAAkBkE,KAChB,SAACtB,EAAkBuB,GAAnB,OACE,eAACC,EAAA,EAAD,CAAiBC,GAAI,EAAGC,GAAI,EAA5B,UACE,cAACC,EAAA,EAAD,CAAOC,MAAI,EAACC,GAAG,UAAf,SACGN,EAAQ,IAEX,cAACO,EAAA,EAAD,CAAOC,GAAG,YAAYtE,IAAKuC,EAAiBvC,IAAKgC,WAAS,MAJlD8B,c,oBCrM1B,SAASS,EAAczF,GAErB,IACEI,EACEP,IAAMa,WAAWd,GADnBQ,WAOF,OACE,cAACsF,EAAA,EAAD,CACEC,UAAU,iBACVC,MAAO5F,EAAM4F,MACb9B,UAAU,OAHZ,SAKE,cAAC+B,EAAA,EAAKC,OAAN,CACE7B,SAAW7D,EAAa,OAAS,GACjC,aAAW,gCACXG,MAAOP,EAAM+F,eACbC,SAde,SAACC,GACpBjG,EAAMkG,kBAAkBD,EAAME,OAAO5F,QASnC,SAOIP,EAAMoG,QAAQrB,KACZ,SAACsB,GAAD,OACA,wBAEE9F,MAAO8F,EAAO9F,MAFhB,SAIG8F,EAAOT,OAHHS,EAAO9F,cCvB1B,SAAS+F,IAEP,MAAkCzG,IAAMI,SAAS,YAAjD,mBAAOmE,EAAP,KAAkBmC,EAAlB,KACA,EAAoC1G,IAAMI,SAAS,OAAnD,mBAAOoE,EAAP,KAAmBmC,EAAnB,KACA,EAAkC3G,IAAMI,SAAS,WAAjD,mBAAOqE,EAAP,KAAkBmC,EAAlB,KACA,EAAgD5G,IAAMI,SAAS,SAA/D,mBAAOsE,EAAP,KAAyBmC,EAAzB,KACA,EAA4C7G,IAAMI,SAAS,QAA3D,mBAAOuE,EAAP,KAAuBmC,EAAvB,KACA,EAAoD9G,IAAMI,SAAS,IAAnE,mBAAOwE,EAAP,KAA2BmC,EAA3B,KAsCA,OACE,mCACE,cAAChD,EAAA,EAAD,CAAWE,UAAU,OAArB,SACE,cAAC+B,EAAA,EAAD,UACE,eAACf,EAAA,EAAD,WACE,eAACG,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAhB,UACE,iDACA,cAACM,EAAD,CACEG,MAAM,aACNG,eAAgB3B,EAChB8B,kBAAmBK,EACnBH,QA/CS,CACrB,CAAE7F,MAAO,WAAYqF,MAAO,SAC5B,CAAErF,MAAO,YAAaqF,MAAO,QAC7B,CAAErF,MAAO,UAAWqF,MAAO,mBA8CjB,cAACH,EAAD,CACEG,MAAM,mBACNG,eAAgB1B,EAChB6B,kBAAmBM,EACnBJ,QA/CW,CACvB,CAAE7F,MAAO,MAAOqF,MAAO,OACvB,CAAErF,MAAO,MAAOqF,MAAO,OACvB,CAAErF,MAAO,MAAOqF,MAAO,OACvB,CAAErF,MAAO,MAAOqF,MAAO,OACvB,CAAErF,MAAO,MAAOqF,MAAO,OACvB,CAAErF,MAAO,MAAOqF,MAAO,OACvB,CAAErF,MAAO,MAAOqF,MAAO,UA0Cb,cAACH,EAAD,CACEG,MAAM,aACNG,eAAgBzB,EAChB4B,kBAAmBO,EACnBL,QA3CU,CACtB,CAAE7F,MAAO,UAAWqF,MAAO,MAC3B,CAAErF,MAAO,gBAAiBqF,MAAO,YA2CvB,cAACH,EAAD,CACEG,MAAM,qBACNG,eAAgBxB,EAChB2B,kBAAmBQ,EACnBN,QA5CgB,CAC5B,CAAE7F,MAAO,OAAQqF,MAAO,OACxB,CAAErF,MAAO,QAASqF,MAAO,SA4CO,SAArBrB,EACC,qCACE,cAACkB,EAAD,CACEG,MAAM,mBACNG,eAAgBvB,EAChB0B,kBAAmBS,EACnBP,QA/CU,CAC1B,CAAE7F,MAAO,OAAQqF,MAAO,OACxB,CAAErF,MAAO,SAAUqF,MAAO,SA+CZ,cAACH,EAAD,CACEG,MAAM,kCACNG,eAAgBtB,EAChByB,kBAAmBU,EACnBR,QAhDc,CAC9B,CAAE7F,MAAO,gBAAiBqF,MAAO,OACjC,CAAErF,MAAO,GAAIqF,MAAO,YAiDR,QAGJ,cAACX,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACE,cAAC1E,EAAD,CACE2D,UAAWA,EACXC,WAAYA,EACZC,UAAWA,EACXC,iBAAkBA,EAClBC,eAAgBA,EAChBC,mBAAoBA,eCzGpC,SAASoC,EAAa7G,GAMpB,OACE,eAAC6F,EAAA,EAAKiB,MAAN,CAAYhD,UAAU,OAAtB,UACE,cAAC+B,EAAA,EAAKkB,MAAN,UAAa/G,EAAMgH,YACnB,cAACnB,EAAA,EAAKoB,QAAN,CACEC,UAAQ,EACRlD,KAAK,KACL9B,KAAK,OACLiF,YAAY,gBACZ5G,MAAOP,EAAMoH,cACbpB,SAbwB,SAACC,GAC7BjG,EAAMqH,iBAAiBpB,EAAME,OAAO5F,a,qBCHxC,SAAS+G,EAAYtH,GAMnB,OACE,cAAC0F,EAAA,EAAD,CACEC,UAAU,iBACVC,MAAO5F,EAAMgH,UACblD,UAAU,OAHZ,SAKE,cAAC+B,EAAA,EAAKC,OAAN,CACE,aAAW,gCACXvF,MAAOP,EAAMoH,cACbpB,SAbe,SAACC,GACpBjG,EAAMqH,iBAAiBpB,EAAME,OAAO5F,QAahC2G,UAAQ,EAJV,SAOIlH,EAAME,iBAAiB6E,KACrB,SAACzB,EAAiB0B,GAAlB,OACA,wBAEEzE,MAAOyE,EAFT,SAIGA,EAAQ,GAHJA,U,2BCpBnB,SAASuC,EAAgBvH,GACvB,OACE,eAACwH,EAAA,EAAD,2BACMxH,GADN,IAEEgE,KAAK,KACL,kBAAgB,gCAChByD,UAAQ,EAJV,UAME,cAACD,EAAA,EAAME,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACH,EAAA,EAAMI,MAAP,CAAapC,GAAG,gCAAhB,6BAIF,cAACgC,EAAA,EAAMK,KAAP,UAEK7H,EAAMyC,MAIP,qCACA,8BACE,cAAC,IAAD,CAAoBqF,MAAM,QAD5B,4BAGA,qDAPA,8BACE,cAAC,IAAD,CAAoBA,MAAM,UAD5B,oCAaJ,cAACN,EAAA,EAAMO,OAAP,UACE,cAAClE,EAAA,EAAD,CAAQG,KAAK,KAAKE,QAASlE,EAAMgI,OAAjC,yB,YCvBR,SAASC,IAEP,IACE/H,EACEL,IAAMa,WAAWd,GADnBM,iBAKF,EAAkCL,IAAMI,SAAS,QAAjD,mBAAOiI,EAAP,KAAkBC,EAAlB,KACA,EAAgDtI,IAAMI,SAAS,eAA/D,mBAAOmI,EAAP,KAAyBC,EAAzB,KACA,EAA0CxI,IAAMI,SAAS,uBAAzD,mBAAOqI,EAAP,KAAsBC,EAAtB,KACA,EAA0C1I,IAAMI,SAAS,GAAzD,mBAAOuI,EAAP,KAAsBC,EAAtB,KACA,EAAkC5I,IAAMI,UAAS,GAAjD,mBAAOyI,EAAP,KAAkBC,EAAlB,KAEA,EAAgC9I,IAAMI,UAAS,GAA/C,mBAAO2I,EAAP,KAAkBC,EAAlB,KACA,EAA0BhJ,IAAMI,UAAS,GAAzC,mBAAOwC,EAAP,KAAcqG,EAAd,KA0DA,OACE,qCACE,cAAClF,EAAA,EAAD,UACE,eAACiC,EAAA,EAAD,CAAMkD,SAnDS,SAAC9C,GACpBA,EAAM+C,iBAEN,IAAI1F,EAXiB,SAACA,EAAiB2F,GACvC,OAAO,IAAI9G,KACT,CAACmB,GACD2F,EACA,CAAE/G,KAAM,oBAOYgH,CACpBhJ,EAAiBsI,GACjBF,GAGEa,EAAW,IAAIC,SAEnBD,EAASE,OAAO,OAAQnB,GACxBiB,EAASE,OAAO,cAAejB,GAC/Be,EAASE,OAAO,aAAc/F,GAC9Bd,QAAQ8G,IAAIhG,GAEZuF,GAAW,GAEXU,IAAMC,KApCI,6CAsCRL,EACA,CACEM,QAAS,CAEP,eAAgB,yBAIrBC,MAAK,SAACnH,GACLsG,GAAW,GACa,MAApBtG,EAASoH,SACXb,GAAS,GACTH,GAAa,GAEbnG,QAAQ8G,IAAI,WACZ9G,QAAQ8G,IAAI/G,EAASqH,UAGxBC,OAAM,SAACpH,GACNoG,GAAW,GACXC,GAAS,GACTH,GAAa,GAEbnG,QAAQ8G,IAAI7G,OASoBqB,UAAU,mBAAxC,UACE,qDACA,cAAC+C,EAAD,CACEG,UAAU,qBACVI,cAAec,EACfb,iBAAkBc,IAEpB,cAACtB,EAAD,CACEG,UAAU,4BACVI,cAAegB,EACff,iBAAkBgB,IAEpB,cAACxB,EAAD,CACEG,UAAU,kBACVI,cAAekB,EACfjB,iBAAkBkB,IAEpB,cAACjB,EAAD,CACEN,UAAU,qBACV9G,iBAAkBA,EAClBkH,cAAeoB,EACfnB,iBAAkBoB,IAEpB,eAAC5E,EAAA,EAAD,CACEE,QAAQ,UACRC,KAAK,KACL9B,KAAK,SACL+B,SAAU2E,EAJZ,UAMGA,EACC,cAAClE,EAAA,EAAD,CACAC,GAAG,OACHC,UAAU,SACVZ,KAAK,KACLa,KAAK,SACL,cAAY,SACR,cAAC,IAAD,IAEL+D,EAAY,qBAAuB,uBAO1C,cAACrB,EAAD,CACEuC,KAAMpB,EACNV,OAAQ,kBAAMW,GAAa,IAC3BlG,MAAOA,EAAQ,EAAI,O,YCzIZ,MAA0B,sCCSzC,SAASsH,IACP,OACE,qCACE,cAACC,EAAA,EAAD,CAAQ1E,GAAG,OAAOvB,QAAQ,OAAOkG,OAAO,MAAxC,SACE,cAACrG,EAAA,EAAD,UACE,eAACoG,EAAA,EAAOE,MAAR,CAAcC,KAAK,QAAnB,UACE,qBACEC,IAAI,GACJlJ,IAAKmJ,EACLC,MAAM,KACNC,OAAO,KACPzG,UAAU,6BACT,IAPL,kBAaJ,cAACwC,EAAD,IACA,cAAC2B,EAAD,OChBSuC,MARf,WACE,OACE,cAACzK,EAAD,UACE,cAACgK,EAAD,OCKSU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.935217ca.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst DigitalizationContext = React.createContext();\r\n\r\nfunction DigitalizationProvider(props) {\r\n\r\n  const [scannedDocuments, setScannedDocuments] = React.useState([]);\r\n  const [isScanning, setScanning] = React.useState(false);\r\n\r\n  return (\r\n    <DigitalizationContext.Provider value={{\r\n      scannedDocuments,\r\n      setScannedDocuments,\r\n      isScanning,\r\n      setScanning\r\n    }}>\r\n      {props.children}\r\n    </DigitalizationContext.Provider>\r\n  )\r\n}\r\n\r\nexport { DigitalizationContext, DigitalizationProvider };\r\n","import React from 'react';\r\nimport { DigitalizationContext } from '../DigitalizationContext';\r\nimport 'scanner.js';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport { MdScanner } from 'react-icons/md';\r\nimport { AiOutlineClear } from 'react-icons/ai';\r\n\r\n/* global scanner */\r\n\r\nfunction Scan(props) {\r\n\r\n  const {\r\n    setScannedDocuments,\r\n    isScanning,\r\n    setScanning\r\n  } = React.useContext(DigitalizationContext);\r\n\r\n  const [scannedImages, setScannedImages] = React.useState([]);\r\n  const [scannedThumbnails, setScannedThumbnails] = React.useState([]);\r\n\r\n  const cleanScanner = () => {\r\n    setScannedImages([]);\r\n    setScannedThumbnails([]);\r\n    setScannedDocuments([]);\r\n  };\r\n\r\n  const addScannedImage = (scannedImage) => {\r\n    setScannedImages(prevScannedImages => {\r\n      return [\r\n        ...prevScannedImages,\r\n        scannedImage\r\n      ]\r\n    })\r\n  };\r\n\r\n  const addScannedThumbnail = (scannedThumbnail) => {\r\n    setScannedThumbnails(prevThumbnails => {\r\n      return [\r\n        ...prevThumbnails,\r\n        scannedThumbnail\r\n      ]\r\n    })\r\n  };\r\n\r\n  const addScannedDocument = (scannedDocument) => {\r\n    setScannedDocuments(prevScannedDocuments => {\r\n      return [\r\n        ...prevScannedDocuments,\r\n        scannedDocument\r\n      ]\r\n    })\r\n  };\r\n\r\n  const fixBinary = (bin) => {\r\n    var length = bin.length;\r\n    var buf = new ArrayBuffer(length);\r\n    var arr = new Uint8Array(buf);\r\n    for (var i = 0; i < length; i++) {\r\n      arr[i] = bin.charCodeAt(i);\r\n    }\r\n    return buf;\r\n  };\r\n\r\n  const convertToFile = (scannedImage) => {\r\n    let pdf = scannedImage.src.split(',')[1];\r\n    let binary = fixBinary(window.atob(pdf));\r\n    let blob = new Blob([binary], { type: \"application/pdf\"});\r\n    let file = new File([blob], \"document.pdf\", { type: 'application/pdf' });\r\n    return file;\r\n  };\r\n\r\n  const scanDocument = () => {\r\n    setScanning(true);\r\n    scanner.scan(\r\n      displayImagesOnPage,\r\n      {\r\n        \"use_asprise_dialog\": false,\r\n        \"prompt_scan_more\":  true, /** Default value: false */    \r\n        // --------------- Scan Settings ---------------      \r\n        \"twain_cap_setting\" : {\r\n            \"ICAP_PIXELTYPE\" : props.colorMode,\r\n            \"ICAP_XRESOLUTION\" : props.resolution,\r\n            \"ICAP_YRESOLUTION\" : props.resolution,\r\n            \"ICAP_SUPPORTEDSIZES\" : props.paperSize,\r\n        },\r\n        // --------------- Processing Settings ---------------\r\n        // Blank page detection/discard\r\n        \"detect_blank_pages\": props.detectBlankPages, /** Default value: false */\r\n        \"blank_page_threshold\": \"0.0001\",\r\n        \"blank_page_margin_percent\": \"8\",\r\n        \"blank_page_policy\": props.keepBlankPages,\r\n\r\n        // Document separation\r\n        \"doc_separators\": [ /** applicable for PDF and TIFF formats only. */\r\n            props.blankPageSeparator  /** Use blank sheets to separate documents. */\r\n        ],\r\n\r\n        // --------------- Output Settings ---------------\r\n        \"output_settings\": [\r\n            {\r\n                \"type\": \"return-base64\",\r\n                /* \"format\": \"jpg\" */\r\n                \"format\": \"pdf\"\r\n            },\r\n            {\r\n                \"type\": \"return-base64-thumbnail\",\r\n                \"format\": \"jpg\",\r\n                \"thumbnail_height\": 400\r\n            }\r\n        ]\r\n      }\r\n    )\r\n  };\r\n\r\n  const displayImagesOnPage = (successful, mesg, response) => {\r\n\r\n    if(!successful) { // On error\r\n      console.error('Failed: ' + mesg);\r\n      setScanning(false);\r\n      return;\r\n    }\r\n\r\n    if(successful && mesg != null && mesg.toLowerCase().indexOf('user cancel') >= 0) { // User cancelled.\r\n      console.info('User cancelled');\r\n      setScanning(false);\r\n      return;\r\n    }\r\n\r\n    var scannedImages = scanner.getScannedImages(response, true, false); // returns an array of ScannedImage\r\n    for(let i = 0; (scannedImages instanceof Array) && i < scannedImages.length; i++) {\r\n      var scannedImage = scannedImages[i];\r\n      processOriginal(scannedImage);\r\n    }\r\n\r\n    var thumbnails = scanner.getScannedImages(response, false, true); // returns an array of ScannedImage\r\n    for(let i = 0; (thumbnails instanceof Array) && i < thumbnails.length; i++) {\r\n      var thumbnail = thumbnails[i];\r\n      processThumbnail(thumbnail);\r\n    }\r\n\r\n    setScanning(false);\r\n  };\r\n\r\n  const processOriginal = (scannedImage) => {\r\n    addScannedImage(scannedImage);\r\n\r\n    let scannedDocument = convertToFile(scannedImage);\r\n    addScannedDocument(scannedDocument);\r\n  };\r\n\r\n  const processThumbnail = (scannedThumbnail) => {\r\n    addScannedThumbnail(scannedThumbnail);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Button\r\n          className=\"m-1\"\r\n          variant=\"primary\"\r\n          size=\"sm\"\r\n          type=\"submit\"\r\n          disabled={isScanning}\r\n          onClick={scanDocument}\r\n        >\r\n          {isScanning ?\r\n            <Spinner\r\n              as=\"span\"\r\n              animation=\"border\"\r\n              size=\"sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            />: <MdScanner />\r\n          }\r\n          {isScanning ? ' Scanning…' : 'Scan'}\r\n        </Button>\r\n\r\n        <Button\r\n          className=\"m-1\"\r\n          variant=\"primary\"\r\n          size=\"sm\"\r\n          type=\"submit\"\r\n          onClick={cleanScanner}\r\n        >\r\n          <AiOutlineClear />Clear\r\n        </Button>\r\n      </Container>\r\n\r\n      <Container>\r\n        <Row>\r\n          <p>Longitud imagesScanned: {scannedImages.length}</p>\r\n          <p>Longitud Thumbnails: {scannedThumbnails.length}</p>\r\n          {\r\n            scannedThumbnails.map(\r\n              (scannedThumbnail, index) => \r\n                <Col key={index} xs={6} md={4}>\r\n                  <Badge pill bg=\"primary\">\r\n                    {index + 1}\r\n                  </Badge>\r\n                  <Image id=\"sampleImg\" src={scannedThumbnail.src} thumbnail />\r\n                </Col>\r\n            )\r\n          }\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Scan }\r\n","import React from 'react';\r\nimport { DigitalizationContext } from '../DigitalizationContext';\r\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nfunction ScanParameter(props) {\r\n\r\n  const {\r\n    isScanning\r\n  } = React.useContext(DigitalizationContext);\r\n\r\n  const handleChange = (event) => {\r\n    props.setParameterValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <FloatingLabel\r\n      controlId=\"floatingSelect\"\r\n      label={props.label}\r\n      className=\"mb-2\"\r\n    >\r\n      <Form.Select\r\n        disabled={ isScanning ? \"true\" : \"\" }\r\n        aria-label=\"Floating label select example\"\r\n        value={props.parameterValue}\r\n        onChange={handleChange}\r\n      >\r\n        {\r\n          props.options.map(\r\n            (option) => \r\n            <option\r\n              key={option.value}\r\n              value={option.value}\r\n            >\r\n              {option.label}\r\n            </option>\r\n          )\r\n        }\r\n      </Form.Select>\r\n    </FloatingLabel>\r\n  )\r\n}\r\n\r\nexport { ScanParameter };\r\n","import React from 'react';\r\nimport { Scan } from '../Scan';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { ScanParameter } from '../ScanParameter';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction Scanner() {\r\n\r\n  const [colorMode, setColorMode] = React.useState('TWPT_RGB');\r\n  const [resolution, setResolution] = React.useState('200');\r\n  const [paperSize, setPaperSize] = React.useState('TWSS_A4');\r\n  const [detectBlankPages, setDetectBlankPages] = React.useState('false');\r\n  const [keepBlankPages, setKeepBlankPages] = React.useState('keep');\r\n  const [blankPageSeparator, setBlankPageSeparator] = React.useState(\"\");\r\n\r\n  let colorModeOptions = [\r\n    { value: \"TWPT_RGB\", label: \"Color\" },\r\n    { value: \"TWPT_GRAY\", label: \"Gris\" },\r\n    { value: \"TWPT_BW\", label: \"Blanco/Negro\" },\r\n  ]\r\n\r\n  let resolutionsOptions = [\r\n    { value: \"100\", label: \"100\" },\r\n    { value: \"150\", label: \"150\" },\r\n    { value: \"200\", label: \"200\" },\r\n    { value: \"250\", label: \"250\" },\r\n    { value: \"300\", label: \"300\" },\r\n    { value: \"350\", label: \"350\" },\r\n    { value: \"400\", label: \"400\" },\r\n  ]\r\n\r\n  let paperSizesOptions = [\r\n    { value: \"TWSS_A4\", label: \"A4\" },\r\n    { value: \"TWSS_USLETTER\", label: \"Carta\" },\r\n  ]\r\n\r\n  let DetectBlankPagesOptions = [\r\n    { value: \"true\", label: \"Yes\" },\r\n    { value: \"false\", label: \"No\" },\r\n  ]\r\n\r\n  let keepBlankPagesOptions = [\r\n    { value: \"keep\", label: \"Yes\" },\r\n    { value: \"remove\", label: \"No\" },\r\n  ]\r\n\r\n  let blankPageSeparatorOptions = [\r\n    { value: \"blank:DOC_SEP\", label: \"Yes\" },\r\n    { value: \"\", label: \"No\" },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"mt-3\">\r\n        <Form>\r\n          <Row>\r\n            <Col xs={6} md={3}>\r\n              <h4>Scan Parameters</h4>\r\n              <ScanParameter\r\n                label=\"Color mode\"\r\n                parameterValue={colorMode}\r\n                setParameterValue={setColorMode}\r\n                options={colorModeOptions}\r\n              />\r\n              <ScanParameter\r\n                label=\"Resolution (DPI)\"\r\n                parameterValue={resolution}\r\n                setParameterValue={setResolution}\r\n                options={resolutionsOptions}\r\n              />\r\n              <ScanParameter\r\n                label=\"Paper Size\"\r\n                parameterValue={paperSize}\r\n                setParameterValue={setPaperSize}\r\n                options={paperSizesOptions}\r\n              />\r\n              <ScanParameter\r\n                label=\"Detect Blank Pages\"\r\n                parameterValue={detectBlankPages}\r\n                setParameterValue={setDetectBlankPages}\r\n                options={DetectBlankPagesOptions}\r\n              />\r\n              {detectBlankPages === \"true\" ?\r\n                <>\r\n                  <ScanParameter\r\n                    label=\"Keep Blank Pages\"\r\n                    parameterValue={keepBlankPages}\r\n                    setParameterValue={setKeepBlankPages}\r\n                    options={keepBlankPagesOptions}\r\n                  />\r\n                  <ScanParameter\r\n                    label=\"Document Separator (Blank Page)\"\r\n                    parameterValue={blankPageSeparator}\r\n                    setParameterValue={setBlankPageSeparator}\r\n                    options={blankPageSeparatorOptions}\r\n                  />\r\n                </>\r\n              : null }\r\n\r\n            </Col>\r\n            <Col xs={12} md={8}>\r\n              <Scan\r\n                colorMode={colorMode}\r\n                resolution={resolution}\r\n                paperSize={paperSize}\r\n                detectBlankPages={detectBlankPages}\r\n                keepBlankPages={keepBlankPages}\r\n                blankPageSeparator={blankPageSeparator}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Container>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Scanner };\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nfunction FileProperty(props) {\r\n\r\n  const onPropertyValueChange = (event) => {\r\n    props.setPropertyValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Form.Group className=\"mb-3\">\r\n      <Form.Label>{props.labelName}</Form.Label>\r\n      <Form.Control\r\n        required\r\n        size=\"sm\"\r\n        type=\"text\"\r\n        placeholder=\"Enter a value\"\r\n        value={props.propertyValue}\r\n        onChange={onPropertyValueChange}\r\n      />\r\n    </Form.Group>\r\n  )\r\n}\r\n\r\nexport { FileProperty }\r\n","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\r\n\r\nfunction ScannedFile(props) {\r\n\r\n  const handleChange = (event) => {\r\n    props.setPropertyValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <FloatingLabel\r\n      controlId=\"floatingSelect\"\r\n      label={props.labelName}\r\n      className=\"mb-2\"\r\n    >\r\n      <Form.Select\r\n        aria-label=\"Floating label select example\"\r\n        value={props.propertyValue}\r\n        onChange={handleChange}\r\n        required\r\n      >\r\n        {\r\n          props.scannedDocuments.map(\r\n            (scannedDocument, index) => \r\n            <option\r\n              key={index}\r\n              value={index}\r\n            >\r\n              {index + 1}\r\n            </option>\r\n          )\r\n        }\r\n      </Form.Select>\r\n    </FloatingLabel>\r\n  )\r\n}\r\n\r\nexport { ScannedFile }\r\n","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { BsFileEarmarkCheck } from 'react-icons/bs';\r\nimport { BsFileEarmarkMinus } from 'react-icons/bs';\r\n\r\nfunction UploadFileModal(props) {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"sm\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Upload Status\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {\r\n          !props.error ?\r\n          <p>\r\n            <BsFileEarmarkCheck color=\"green\" /> File uploaded successfully!\r\n          </p> :\r\n          <>\r\n          <p>\r\n            <BsFileEarmarkMinus color=\"red\" /> There was an error :(\r\n          </p>\r\n          <p>\r\n            Please try again.\r\n          </p>\r\n          </>\r\n        }\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button size=\"sm\" onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport { UploadFileModal }\r\n","import React from 'react';\r\nimport { DigitalizationContext } from '../DigitalizationContext';\r\nimport { FileProperty } from '../FileProperty';\r\nimport { ScannedFile } from '../ScannedFile';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { UploadFileModal } from '../UploadFileModal';\r\nimport { FaFileUpload } from 'react-icons/fa';\r\n\r\nfunction UploadScannedDocumentForm() {\r\n\r\n  const {\r\n    scannedDocuments\r\n  } = React.useContext(DigitalizationContext);\r\n\r\n  const URL = \"https://attachments-test.xyz/requirements/\";\r\n\r\n  const [nameValue, setNameValue] = React.useState('RQ00');\r\n  const [descriptionValue, setDescriptionValue] = React.useState('Sample Desc');\r\n  const [fileNameValue, setFileNameValue] = React.useState('scannedDocument.pdf');\r\n  const [indexDocument, setIndexDocument] = React.useState(0);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  const [isLoading, setLoading] = React.useState(false);\r\n  const [error, setError] = React.useState(false);\r\n\r\n  const changeFileName = (scannedDocument, fileName) => {\r\n    return new File(\r\n      [scannedDocument],\r\n      fileName,\r\n      { type: 'application/pdf' }\r\n    );\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    let scannedDocument = changeFileName(\r\n      scannedDocuments[indexDocument],\r\n      fileNameValue\r\n    );\r\n\r\n    let formData = new FormData();\r\n\r\n    formData.append('name', nameValue);\r\n    formData.append('description', descriptionValue);\r\n    formData.append('attachment', scannedDocument);\r\n    console.log(scannedDocument);\r\n\r\n    setLoading(true);\r\n\r\n    axios.post(\r\n      URL,\r\n      formData,\r\n      { \r\n        headers: {\r\n          /* \"Authorization\": `Token ${token}`, */\r\n          \"Content-type\": \"multipart/form-data\",\r\n        },\r\n      }\r\n    )\r\n    .then((response) => {\r\n      setLoading(false);\r\n      if (response.status === 201) {\r\n        setError(false);\r\n        setModalShow(true);\r\n\r\n        console.log(\"Todo OK\");\r\n        console.log(response.data);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      setLoading(false);\r\n      setError(true);\r\n      setModalShow(true);\r\n\r\n      console.log(error);\r\n      \r\n    })\r\n\r\n  }; \r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Form onSubmit={handleSubmit} className=\"col-md-4 mx-auto\">\r\n          <h4>Upload Scanned File</h4>\r\n          <FileProperty\r\n            labelName=\"Requirement Name: \"\r\n            propertyValue={nameValue}\r\n            setPropertyValue={setNameValue}\r\n          />          \r\n          <FileProperty\r\n            labelName=\"Requirement Description: \"\r\n            propertyValue={descriptionValue}\r\n            setPropertyValue={setDescriptionValue}\r\n          />\r\n          <FileProperty\r\n            labelName=\"Document Name: \"\r\n            propertyValue={fileNameValue}\r\n            setPropertyValue={setFileNameValue}\r\n          />\r\n          <ScannedFile\r\n            labelName=\"Scanned Document: \"\r\n            scannedDocuments={scannedDocuments}\r\n            propertyValue={indexDocument}\r\n            setPropertyValue={setIndexDocument}\r\n          />\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            type=\"submit\"\r\n            disabled={isLoading}\r\n          >\r\n            {isLoading ?\r\n              <Spinner\r\n              as=\"span\"\r\n              animation=\"border\"\r\n              size=\"sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n              />: <FaFileUpload />\r\n            }\r\n            {isLoading ? ' Uploading file...' : ' Upload file'}\r\n          </Button>\r\n        </Form>\r\n      </Container>\r\n      {/* <Button variant=\"primary\" onClick={() => setModalShow(true)}>\r\n        Launch vertically centered modal\r\n      </Button> */}\r\n      <UploadFileModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        error={error ? 1 : 0}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport { UploadScannedDocumentForm }\r\n","export default __webpack_public_path__ + \"static/media/utpl_logo.92719d4e.png\";","import React from 'react';\nimport 'scanner.js';\nimport { Scanner } from '../Scanner';\nimport { UploadFileForm } from '../UploadFileForm';\nimport { UploadScannedDocumentForm } from '../UploadScannedDocumentForm';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport logo from '../../utpl_logo.png';\n\nfunction AppUI() {\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n        <Container>\n          <Navbar.Brand href=\"#home\">\n            <img\n              alt=\"\"\n              src={logo}\n              width=\"15\"\n              height=\"30\"\n              className=\"d-inline-block align-top\"\n            />{' '}\n          Scan App\n          </Navbar.Brand>\n        </Container>\n      </Navbar>\n\n      <Scanner />\n      <UploadScannedDocumentForm />\n      {/* <UploadFileForm /> */}\n    </>\n  );\n}\n\nexport { AppUI };\n","import React from 'react';\r\nimport { DigitalizationProvider } from '../DigitalizationContext';\r\nimport { AppUI } from './AppUI';\r\n\r\nfunction App() {\r\n  return (\r\n    <DigitalizationProvider>\r\n      <AppUI />\r\n    </DigitalizationProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}