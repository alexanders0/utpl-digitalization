{"version":3,"sources":["components/DigitalizationContext/index.js","components/Scan/index.js","components/ScanParameter/index.js","components/Scanner/index.js","components/FileProperty/index.js","components/ScannedFile/index.js","components/UploadFileModal/index.js","components/UploadScannedDocumentForm/index.js","utpl_logo.png","components/App/AppUI.js","components/App/index.js","reportWebVitals.js","index.js"],"names":["DigitalizationContext","React","createContext","DigitalizationProvider","props","useState","scannedDocuments","setScannedDocuments","Provider","value","children","Scan","useContext","scannedImages","setScannedImages","scannedThumbnails","setScannedThumbnails","isScanning","setScanning","convertToFile","scannedImage","pdf","src","split","binary","bin","length","buf","ArrayBuffer","arr","Uint8Array","i","charCodeAt","fixBinary","window","atob","blob","Blob","type","File","displayImagesOnPage","successful","mesg","response","console","error","toLowerCase","indexOf","info","scanner","getScannedImages","Array","processOriginal","thumbnails","thumbnail","processThumbnail","addScannedImage","scannedDocument","addScannedDocument","scannedThumbnail","addScannedThumbnail","Container","Button","variant","size","disabled","onClick","scan","colorMode","resolution","paperSize","Spinner","as","animation","role","Row","map","index","Col","xs","md","Badge","pill","bg","Image","id","ScanParameter","FloatingLabel","controlId","label","className","Form","Select","parameterValue","onChange","event","setParameterValue","target","options","option","Scanner","setColorMode","setResolution","setPaperSize","FileProperty","Group","Label","labelName","Control","required","placeholder","propertyValue","setPropertyValue","ScannedFile","UploadFileModal","Modal","centered","Header","closeButton","Title","Body","color","Footer","onHide","UploadScannedDocumentForm","nameValue","setNameValue","descriptionValue","setDescriptionValue","fileNameValue","setFileNameValue","indexDocument","setIndexDocument","modalShow","setModalShow","isLoading","setLoading","setError","onSubmit","preventDefault","fileName","changeFileName","formData","FormData","append","log","axios","post","headers","then","status","data","catch","show","AppUI","Navbar","sticky","Brand","href","alt","logo","width","height","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1925b200.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst DigitalizationContext = React.createContext();\r\n\r\nfunction DigitalizationProvider(props) {\r\n\r\n  const [scannedDocuments, setScannedDocuments] = React.useState([]);\r\n\r\n  return (\r\n    <DigitalizationContext.Provider value={{\r\n      scannedDocuments,\r\n      setScannedDocuments\r\n    }}>\r\n      {props.children}\r\n    </DigitalizationContext.Provider>\r\n  )\r\n}\r\n\r\nexport { DigitalizationContext, DigitalizationProvider };\r\n","import React from 'react';\r\nimport { DigitalizationContext } from '../DigitalizationContext';\r\nimport 'scanner.js';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport { MdScanner } from 'react-icons/md';\r\n\r\n/* global scanner */\r\n\r\nfunction Scan(props) {\r\n\r\n  const {\r\n    scannedDocuments,\r\n    setScannedDocuments\r\n  } = React.useContext(DigitalizationContext);\r\n\r\n  const [scannedImages, setScannedImages] = React.useState([]);\r\n  const [scannedThumbnails, setScannedThumbnails] = React.useState([]);\r\n  const [isScanning, setScanning] = React.useState(false);\r\n\r\n  const addScannedImage = (scannedImage) => {\r\n    setScannedImages([\r\n      ...scannedImages,\r\n      scannedImage\r\n    ]);\r\n  };\r\n\r\n  const addScannedThumbnail = (scannedThumbnail) => {\r\n    setScannedThumbnails([\r\n      ...scannedThumbnails,\r\n      scannedThumbnail\r\n    ]);\r\n  };\r\n\r\n  const addScannedDocument = (scannedDocument) => {\r\n    setScannedDocuments([\r\n      ...scannedDocuments,\r\n      scannedDocument\r\n    ]);\r\n  };\r\n\r\n  const fixBinary = (bin) => {\r\n    var length = bin.length;\r\n    var buf = new ArrayBuffer(length);\r\n    var arr = new Uint8Array(buf);\r\n    for (var i = 0; i < length; i++) {\r\n      arr[i] = bin.charCodeAt(i);\r\n    }\r\n    return buf;\r\n  };\r\n\r\n  const convertToFile = (scannedImage) => {\r\n    let pdf = scannedImage.src.split(',')[1];\r\n    let binary = fixBinary(window.atob(pdf));\r\n    let blob = new Blob([binary], { type: \"application/pdf\"});\r\n    let file = new File([blob], \"document.pdf\", { type: 'application/pdf' });\r\n    return file;\r\n  };\r\n\r\n  const scanDocument = () => {\r\n    setScanning(true);\r\n    scanner.scan(\r\n      displayImagesOnPage,\r\n      {\r\n        \"use_asprise_dialog\": false,      \r\n        // --------------- Scan Settings ---------------      \r\n        \"twain_cap_setting\" : {\r\n            \"ICAP_PIXELTYPE\" : props.colorMode,\r\n            \"ICAP_XRESOLUTION\" : props.resolution,\r\n            \"ICAP_YRESOLUTION\" : props.resolution,\r\n            \"ICAP_SUPPORTEDSIZES\" : props.paperSize,\r\n        },\r\n        // --------------- Processing Settings ---------------\r\n        // Blank page detection/discard\r\n        \"detect_blank_pages\": \"true\", /** Default value: false */\r\n        \"blank_page_threshold\": \"0.0001\",\r\n        \"blank_page_margin_percent\": \"8\",\r\n        \"blank_page_policy\": \"remove\", /** \"keep\" (default) or \"remove\" */\r\n\r\n        // Document separation\r\n        \"doc_separators\": [ /** applicable for PDF and TIFF formats only. */\r\n            \"blank:DOC_SEP\",  /** Use blank sheets to separate documents. */\r\n        ],\r\n\r\n        // --------------- Output Settings ---------------\r\n        \"output_settings\": [\r\n            {\r\n                \"type\": \"return-base64\",\r\n                /* \"format\": \"jpg\" */\r\n                \"format\": \"pdf\"\r\n            },\r\n            {\r\n                \"type\": \"return-base64-thumbnail\",\r\n                \"format\": \"jpg\",\r\n                \"thumbnail_height\": 400\r\n            }\r\n        ]\r\n      }\r\n    )\r\n  };\r\n\r\n  const displayImagesOnPage = (successful, mesg, response) => {\r\n\r\n    if(!successful) { // On error\r\n      console.error('Failed: ' + mesg);\r\n      setScanning(false);\r\n      return;\r\n    }\r\n\r\n    if(successful && mesg != null && mesg.toLowerCase().indexOf('user cancel') >= 0) { // User cancelled.\r\n      console.info('User cancelled');\r\n      setScanning(false);\r\n      return;\r\n    }\r\n\r\n    var scannedImages = scanner.getScannedImages(response, true, false); // returns an array of ScannedImage\r\n    for(let i = 0; (scannedImages instanceof Array) && i < scannedImages.length; i++) {\r\n      var scannedImage = scannedImages[i];\r\n      processOriginal(scannedImage);\r\n    }\r\n\r\n    var thumbnails = scanner.getScannedImages(response, false, true); // returns an array of ScannedImage\r\n    for(let i = 0; (thumbnails instanceof Array) && i < thumbnails.length; i++) {\r\n      var thumbnail = thumbnails[i];\r\n      processThumbnail(thumbnail);\r\n    }\r\n\r\n    setScanning(false);\r\n  };\r\n\r\n  const processOriginal = (scannedImage) => {\r\n    addScannedImage(scannedImage);\r\n\r\n    let scannedDocument = convertToFile(scannedImage);\r\n    addScannedDocument(scannedDocument);\r\n  };\r\n\r\n  const processThumbnail = (scannedThumbnail) => {\r\n    addScannedThumbnail(scannedThumbnail);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            type=\"submit\"\r\n            disabled={isScanning}\r\n            onClick={scanDocument}\r\n          >\r\n            {isScanning ?\r\n              <Spinner\r\n              as=\"span\"\r\n              animation=\"border\"\r\n              size=\"sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n              />: <MdScanner />\r\n            }\r\n            {isScanning ? ' Scanning…' : 'Scan'}\r\n          </Button>\r\n      </Container>\r\n\r\n      <Container>\r\n        <Row>\r\n          {\r\n            scannedThumbnails.map(\r\n              (scannedThumbnail, index) => \r\n                <Col key={index} xs={6} md={4}>\r\n                  <Badge pill bg=\"primary\">\r\n                    {index + 1}\r\n                  </Badge>\r\n                  <Image id=\"sampleImg\" src={scannedThumbnail.src} thumbnail />\r\n                </Col>\r\n            )\r\n          }\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Scan }\r\n","import React from 'react';\r\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nfunction ScanParameter(props) {\r\n\r\n  const handleChange = (event) => {\r\n    props.setParameterValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <FloatingLabel\r\n      controlId=\"floatingSelect\"\r\n      label={props.label}\r\n      className=\"mb-2\"\r\n    >\r\n      <Form.Select\r\n        aria-label=\"Floating label select example\"\r\n        value={props.parameterValue}\r\n        onChange={handleChange}\r\n      >\r\n        {\r\n          props.options.map(\r\n            (option) => \r\n            <option\r\n              key={option.value}\r\n              value={option.value}\r\n            >\r\n              {option.label}\r\n            </option>\r\n          )\r\n        }\r\n      </Form.Select>\r\n    </FloatingLabel>\r\n  )\r\n}\r\n\r\nexport { ScanParameter };\r\n","import React from 'react';\r\nimport { Scan } from '../Scan';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { ScanParameter } from '../ScanParameter';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction Scanner() {\r\n\r\n  const [colorMode, setColorMode] = React.useState('TWPT_RGB');\r\n  const [resolution, setResolution] = React.useState('200');\r\n  const [paperSize, setPaperSize] = React.useState('TWSS_A4');\r\n\r\n  let colorModes = [\r\n    { value: \"TWPT_RGB\", label: \"Color\" },\r\n    { value: \"TWPT_GRAY\", label: \"Gris\" },\r\n    { value: \"TWPT_BW\", label: \"Blanco/Negro\" },\r\n  ]\r\n\r\n  let resolutions = [\r\n    { value: \"100\", label: \"100\" },\r\n    { value: \"150\", label: \"150\" },\r\n    { value: \"200\", label: \"200\" },\r\n    { value: \"250\", label: \"250\" },\r\n    { value: \"300\", label: \"300\" },\r\n    { value: \"350\", label: \"350\" },\r\n    { value: \"400\", label: \"400\" },\r\n  ]\r\n\r\n  let paperSizes = [\r\n    { value: \"TWSS_A4\", label: \"A4\" },\r\n    { value: \"TWSS_USLETTER\", label: \"Carta\" },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Form>\r\n          <Row>\r\n            <Col xs={6} md={3}>\r\n              <h4>Scan Parameters</h4>\r\n              <ScanParameter\r\n                label=\"Color mode\"\r\n                parameterValue={colorMode}\r\n                setParameterValue={setColorMode}\r\n                options={colorModes}\r\n              />\r\n              <ScanParameter\r\n                label=\"Resolution (DPI)\"\r\n                parameterValue={resolution}\r\n                setParameterValue={setResolution}\r\n                options={resolutions}\r\n              />\r\n              <ScanParameter\r\n                label=\"Paper Size\"\r\n                parameterValue={paperSize}\r\n                setParameterValue={setPaperSize}\r\n                options={paperSizes}\r\n              />\r\n            </Col>\r\n            <Col xs={12} md={8}>\r\n              <Scan\r\n                colorMode={colorMode}\r\n                resolution={resolution}\r\n                paperSize={paperSize}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Container>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Scanner };\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nfunction FileProperty(props) {\r\n\r\n  const onPropertyValueChange = (event) => {\r\n    props.setPropertyValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Form.Group className=\"mb-3\">\r\n      <Form.Label>{props.labelName}</Form.Label>\r\n      <Form.Control\r\n        required\r\n        size=\"sm\"\r\n        type=\"text\"\r\n        placeholder=\"Enter a value\"\r\n        value={props.propertyValue}\r\n        onChange={onPropertyValueChange}\r\n      />\r\n    </Form.Group>\r\n  )\r\n}\r\n\r\nexport { FileProperty }\r\n","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\r\n\r\nfunction ScannedFile(props) {\r\n\r\n  const handleChange = (event) => {\r\n    props.setPropertyValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <FloatingLabel\r\n      controlId=\"floatingSelect\"\r\n      label={props.labelName}\r\n      className=\"mb-2\"\r\n    >\r\n      <Form.Select\r\n        aria-label=\"Floating label select example\"\r\n        value={props.propertyValue}\r\n        onChange={handleChange}\r\n        required\r\n      >\r\n        {\r\n          props.scannedDocuments.map(\r\n            (scannedDocument, index) => \r\n            <option\r\n              key={index}\r\n              value={index}\r\n            >\r\n              {index + 1}\r\n            </option>\r\n          )\r\n        }\r\n      </Form.Select>\r\n    </FloatingLabel>\r\n  )\r\n}\r\n\r\nexport { ScannedFile }\r\n","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { BsFileEarmarkCheck } from 'react-icons/bs';\r\nimport { BsFileEarmarkMinus } from 'react-icons/bs';\r\n\r\nfunction UploadFileModal(props) {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"sm\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Upload Status\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {\r\n          !props.error ?\r\n          <p>\r\n            <BsFileEarmarkCheck color=\"green\" /> File uploaded successfully!\r\n          </p> :\r\n          <>\r\n          <p>\r\n            <BsFileEarmarkMinus color=\"red\" /> There was an error :(\r\n          </p>\r\n          <p>\r\n            Please try again.\r\n          </p>\r\n          </>\r\n        }\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button size=\"sm\" onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport { UploadFileModal }\r\n","import React from 'react';\r\nimport { DigitalizationContext } from '../DigitalizationContext';\r\nimport { FileProperty } from '../FileProperty';\r\nimport { ScannedFile } from '../ScannedFile';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { UploadFileModal } from '../UploadFileModal';\r\nimport { FaFileUpload } from 'react-icons/fa';\r\n\r\nfunction UploadScannedDocumentForm() {\r\n\r\n  const {\r\n    scannedDocuments\r\n  } = React.useContext(DigitalizationContext);\r\n\r\n  const URL = \"https://attachments-test.xyz/requirements/\";\r\n\r\n  const [nameValue, setNameValue] = React.useState('RQ00');\r\n  const [descriptionValue, setDescriptionValue] = React.useState('Sample Desc');\r\n  const [fileNameValue, setFileNameValue] = React.useState('scannedDocument.pdf');\r\n  const [indexDocument, setIndexDocument] = React.useState(0);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  const [isLoading, setLoading] = React.useState(false);\r\n  const [error, setError] = React.useState(false);\r\n\r\n  const changeFileName = (scannedDocument, fileName) => {\r\n    return new File(\r\n      [scannedDocument],\r\n      fileName,\r\n      { type: 'application/pdf' }\r\n    );\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    let scannedDocument = changeFileName(\r\n      scannedDocuments[indexDocument],\r\n      fileNameValue\r\n    );\r\n\r\n    let formData = new FormData();\r\n\r\n    formData.append('name', nameValue);\r\n    formData.append('description', descriptionValue);\r\n    formData.append('attachment', scannedDocument);\r\n    console.log(scannedDocument);\r\n\r\n    setLoading(true);\r\n\r\n    axios.post(\r\n      URL,\r\n      formData,\r\n      { \r\n        headers: {\r\n          /* \"Authorization\": `Token ${token}`, */\r\n          \"Content-type\": \"multipart/form-data\",\r\n        },\r\n      }\r\n    )\r\n    .then((response) => {\r\n      setLoading(false);\r\n      if (response.status === 201) {\r\n        setError(false);\r\n        setModalShow(true);\r\n\r\n        console.log(\"Todo OK\");\r\n        console.log(response.data);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      setLoading(false);\r\n      setError(true);\r\n      setModalShow(true);\r\n\r\n      console.log(error);\r\n      \r\n    })\r\n\r\n  }; \r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Form onSubmit={handleSubmit} className=\"col-md-4 mx-auto\">\r\n          <h4>Upload Scanned File</h4>\r\n          <FileProperty\r\n            labelName=\"Requirement Name: \"\r\n            propertyValue={nameValue}\r\n            setPropertyValue={setNameValue}\r\n          />          \r\n          <FileProperty\r\n            labelName=\"Requirement Description: \"\r\n            propertyValue={descriptionValue}\r\n            setPropertyValue={setDescriptionValue}\r\n          />\r\n          <FileProperty\r\n            labelName=\"Document Name: \"\r\n            propertyValue={fileNameValue}\r\n            setPropertyValue={setFileNameValue}\r\n          />\r\n          <ScannedFile\r\n            labelName=\"Scanned Document: \"\r\n            scannedDocuments={scannedDocuments}\r\n            propertyValue={indexDocument}\r\n            setPropertyValue={setIndexDocument}\r\n          />\r\n          <Button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            type=\"submit\"\r\n            disabled={isLoading}\r\n          >\r\n            {isLoading ?\r\n              <Spinner\r\n              as=\"span\"\r\n              animation=\"border\"\r\n              size=\"sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n              />: <FaFileUpload />\r\n            }\r\n            {isLoading ? ' Uploading file...' : ' Upload file'}\r\n          </Button>\r\n        </Form>\r\n      </Container>\r\n      {/* <Button variant=\"primary\" onClick={() => setModalShow(true)}>\r\n        Launch vertically centered modal\r\n      </Button> */}\r\n      <UploadFileModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        error=\"{error}\"\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport { UploadScannedDocumentForm }\r\n","export default __webpack_public_path__ + \"static/media/utpl_logo.92719d4e.png\";","import React from 'react';\nimport 'scanner.js';\nimport { Scanner } from '../Scanner';\nimport { UploadFileForm } from '../UploadFileForm';\nimport { UploadScannedDocumentForm } from '../UploadScannedDocumentForm';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport logo from '../../utpl_logo.png';\n\nfunction AppUI() {\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n        <Container>\n          <Navbar.Brand href=\"#home\">\n            <img\n              alt=\"\"\n              src={logo}\n              width=\"15\"\n              height=\"30\"\n              className=\"d-inline-block align-top\"\n            />{' '}\n          Scan App\n          </Navbar.Brand>\n        </Container>\n      </Navbar>\n\n      <Scanner />\n      <UploadScannedDocumentForm />\n      {/* <UploadFileForm /> */}\n    </>\n  );\n}\n\nexport { AppUI };\n","import React from 'react';\r\nimport { DigitalizationProvider } from '../DigitalizationContext';\r\nimport { AppUI } from './AppUI';\r\n\r\nfunction App() {\r\n  return (\r\n    <DigitalizationProvider>\r\n      <AppUI />\r\n    </DigitalizationProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}